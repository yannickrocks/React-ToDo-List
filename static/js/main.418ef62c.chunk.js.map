{"version":3,"sources":["assets/checkbox.svg","assets/trash-can.svg","assets/done.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","listItems","this","items","map","item","className","key","src","img","onClick","changeImage","type","id","text","value","onChange","e","setUpdate","target","TrashCan","deleteItem","React","Component","App","state","currentItem","checked","CheckBox","handleInput","bind","addItem","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","itemIndex","findIndex","newItemImage","find","Done","onSubmit","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,sC,uBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,oPCwC5BC,E,kDAnCX,WAAYC,GAAQ,uCACVA,G,qDAGA,IAAD,OAECC,EADQC,KAAKF,MAAMG,MACDC,KAAI,SAAAC,GAEpB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC/B,uBAAGD,UAAU,YACZ,yBAAKA,UAAU,WACZE,IAAKH,EAAKI,IACVC,QAAS,kBAAM,EAAKV,MAAMW,YAAYN,EAAMA,EAAKE,QACpD,2BAAOD,UAAU,YACVM,KAAK,OACLC,GAAIR,EAAKS,KACTC,MAAOV,EAAKS,KACZE,SAAU,SAACC,GACP,EAAKjB,MAAMkB,UAAUD,EAAEE,OAAOJ,MAAOV,EAAKE,QAGtD,8BACI,yBAAKD,UAAU,WACXE,IAAKY,IACLV,QAAY,kBAAM,EAAKV,MAAMqB,WAAWhB,EAAKE,cAKrE,OACI,6BAAMN,O,GA/BMqB,IAAMC,W,iCCgHfC,E,kDA7Gb,WAAYxB,GAAO,IAAD,8BAChB,cAAMA,IACDyB,MAAQ,CACXtB,MAAO,GACPuB,YAAa,CACXZ,KAAK,GACLP,IAAK,GACLoB,SAAS,EACTlB,IAAKmB,MAGT,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKT,WAAa,EAAKA,WAAWS,KAAhB,gBAClB,EAAKnB,YAAc,EAAKA,YAAYmB,KAAjB,gBACnB,EAAKZ,UAAY,EAAKA,UAAUY,KAAf,gBAfD,E,wDAkBNb,GACVf,KAAK8B,SAAS,CACZN,YAAY,CACVZ,KAAMG,EAAEE,OAAOJ,MACfR,IAAK0B,KAAKC,MACVP,SAAS,EACTlB,IAAKmB,S,8BAKHX,GACNA,EAAEkB,iBACF,IAAMC,EAAUlC,KAAKuB,MAAMC,YAE3B,GADAW,QAAQC,IAAIF,GACG,KAAZA,EAAgB,CACjB,IAAMG,EAAS,GAAD,mBAAKrC,KAAKuB,MAAMtB,OAAhB,CAAuBiC,IACrClC,KAAK8B,SAAS,CACZ7B,MAAMoC,EACNb,YAAa,CACXZ,KAAK,GACLP,IAAI,GACJoB,SAAS,EACTlB,IAAKmB,U,iCAMFrB,GACT,IAAMiC,EAAgBtC,KAAKuB,MAAMtB,MAAMsC,QAAO,SAAApC,GAAI,OAAIA,EAAKE,MAAQA,KACnEL,KAAK8B,SAAS,CACZ7B,MAAMqC,M,kCAIAnC,EAAME,GAChB,IAAMmC,EAAYxC,KAAKuB,MAAMtB,MAAMwC,WAAU,SAAAtC,GAAI,OAAIA,EAAKE,KAAOA,KAC7DgC,EAAQ,YAAOrC,KAAKuB,MAAMtB,OACxByC,EAAe1C,KAAKuB,MAAMtB,MAAM0C,MAAK,SAAAxC,GAAI,OAAIA,EAAKE,KAAOA,KAC5DqC,EAAajB,SACdiB,EAAajB,SAAU,EACvBiB,EAAanC,IAAMmB,MAGnBgB,EAAajB,SAAU,EACvBiB,EAAanC,IAAMqC,KAErBT,QAAQC,IAAIM,GAEZL,EAASG,GAAaE,EACpB1C,KAAK8B,SAAS,CACZ7B,MAAOoC,M,gCAIHzB,EAAMP,GAAK,IAAD,OACZJ,EAAQD,KAAKuB,MAAMtB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAQA,IACdF,EAAKS,KAAKA,GAGZ,EAAKkB,SAAS,CACZ7B,MAAMA,S,+BAOR,OACC,yBAAKG,UAAU,OACZ,gCACA,0BAAMO,GAAG,aAAakC,SAAU7C,KAAK6B,SACnC,2BAAOnB,KAAK,OAAOoC,YAAY,aAC7BjC,MAASb,KAAKuB,MAAMC,YAAYZ,KAChCE,SAAYd,KAAK2B,cACnB,4BAAQjB,KAAK,UAAb,SAGF,kBAAC,EAAD,CAAWT,MAASD,KAAKuB,MAAMtB,MAC7BkB,WAAcnB,KAAKmB,WACnBV,YAAeT,KAAKS,YACpBO,UAAYhB,KAAKgB,iB,GAvGTI,IAAMC,WCMJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.418ef62c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/checkbox.50294de8.svg\";","module.exports = __webpack_public_path__ + \"static/media/trash-can.29cca656.svg\";","module.exports = __webpack_public_path__ + \"static/media/done.406450f3.svg\";","import React from 'react';\r\nimport './styles/ListItems.css';\r\nimport TrashCan from './assets/trash-can.svg';\r\n\r\nclass ListItems extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const items = this.props.items;\r\n        const listItems = items.map(item => \r\n            {\r\n                return <div className=\"list\" key={item.key}>\r\n                        <p className=\"itemText\"> \r\n                         <img className=\"checkBox\" \r\n                            src={item.img}\r\n                            onClick={() => this.props.changeImage(item, item.key)} />\r\n                         <input className=\"textInput\" \r\n                                type=\"text\" \r\n                                id={item.text} \r\n                                value={item.text}\r\n                                onChange={(e) => {\r\n                                    this.props.setUpdate(e.target.value, item.key)\r\n                                }}\r\n                                />                          \r\n                        <span>\r\n                            <img className=\"trashCan\"\r\n                                src={TrashCan}\r\n                                onClick = { () => this.props.deleteItem(item.key)} />\r\n                            </span>\r\n                        </p>\r\n                </div>\r\n            })\r\n        return(\r\n            <div>{listItems}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListItems;","import React from 'react';\r\nimport './styles/App.css';\r\nimport ListItems from './ListItems.js'\r\nimport CheckBox from './assets/checkbox.svg';\r\nimport Done from './assets/done.svg';\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      currentItem: {\r\n        text:'',\r\n        key: '',\r\n        checked: false,\r\n        img: CheckBox\r\n      }\r\n    }\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.addItem = this.addItem.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.changeImage = this.changeImage.bind(this);\r\n    this.setUpdate = this.setUpdate.bind(this);\r\n  }\r\n\r\n  handleInput(e) {\r\n    this.setState({\r\n      currentItem:{\r\n        text: e.target.value,\r\n        key: Date.now(),\r\n        checked: false,\r\n        img: CheckBox\r\n      }\r\n    })\r\n  };\r\n\r\n  addItem(e){\r\n    e.preventDefault();\r\n    const newItem = this.state.currentItem;\r\n    console.log(newItem);\r\n    if(newItem !== \"\") {\r\n      const newItems=[...this.state.items, newItem];\r\n      this.setState({\r\n        items:newItems,\r\n        currentItem: {\r\n          text:'',\r\n          key:'',\r\n          checked: false,\r\n          img: CheckBox\r\n        }\r\n      })\r\n    }\r\n  };\r\n\r\n  deleteItem(key){\r\n    const filteredItems = this.state.items.filter(item => item.key !== key);\r\n    this.setState({\r\n      items:filteredItems\r\n    })\r\n  };\r\n\r\nchangeImage(item, key){\r\n  const itemIndex = this.state.items.findIndex(item => item.key == key)\r\n  let newItems = [...this.state.items];\r\n  const newItemImage = this.state.items.find(item => item.key == key);\r\n  if(newItemImage.checked){\r\n    newItemImage.checked = false;\r\n    newItemImage.img = CheckBox;\r\n  }\r\n  else{\r\n    newItemImage.checked = true;\r\n    newItemImage.img = Done\r\n  }\r\n  console.log(newItemImage);\r\n\r\n  newItems[itemIndex] = newItemImage;\r\n    this.setState({\r\n      items: newItems\r\n  })\r\n}\r\n\r\nsetUpdate(text, key){\r\n  const items = this.state.items;\r\n  items.map(item => {\r\n    if(item.key === key){\r\n      item.text=text;\r\n    }\r\n    \r\n    this.setState({\r\n      items:items\r\n    })\r\n  })\r\n}\r\n\r\n\r\n  render(){\r\n    return(\r\n     <div className=\"App\">\r\n        <header>\r\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n          <input type=\"text\" placeholder=\"Enter Text\"\r\n            value = {this.state.currentItem.text}\r\n            onChange = {this.handleInput}/>\r\n          <button type=\"submit\">Add</button>\r\n          </form>        \r\n        </header>\r\n        <ListItems items = {this.state.items}\r\n          deleteItem = {this.deleteItem}\r\n          changeImage = {this.changeImage}\r\n          setUpdate ={this.setUpdate}\r\n          />\r\n     </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}